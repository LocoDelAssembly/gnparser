// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: gnparser.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NameType int32

const (
	// NONE is for unparsed names.
	NameType_NONE NameType = 0
	// UNINOMIAL is for names of genus and higher taxa.
	NameType_UNINOMIAL NameType = 1
	// SPECIES is for species and lower taxa (subspecies, varieties etc).
	NameType_SPECIES NameType = 2
	// COMPARISON is for names with uncertain identification.
	NameType_COMPARISON NameType = 3
	// APPROX_SURROGATE is for suroogate names with incomplete identification.
	NameType_APPROX_SURROGATE NameType = 4
	// SURROGATE is for all other surrogate names.
	NameType_SURROGATE NameType = 5
	// NAMED_HYBRID is for names that designate stable hybrids that are given
	// their own name.
	NameType_NAMED_HYBRID NameType = 6
	// HYBRID_FORMULA is for names built from several 'simple' names.
	NameType_HYBRID_FORMULA NameType = 7
	// VIRUS is for names of viruses, plasmids etc.
	NameType_VIRUS NameType = 8
)

// Enum value maps for NameType.
var (
	NameType_name = map[int32]string{
		0: "NONE",
		1: "UNINOMIAL",
		2: "SPECIES",
		3: "COMPARISON",
		4: "APPROX_SURROGATE",
		5: "SURROGATE",
		6: "NAMED_HYBRID",
		7: "HYBRID_FORMULA",
		8: "VIRUS",
	}
	NameType_value = map[string]int32{
		"NONE":             0,
		"UNINOMIAL":        1,
		"SPECIES":          2,
		"COMPARISON":       3,
		"APPROX_SURROGATE": 4,
		"SURROGATE":        5,
		"NAMED_HYBRID":     6,
		"HYBRID_FORMULA":   7,
		"VIRUS":            8,
	}
)

func (x NameType) Enum() *NameType {
	p := new(NameType)
	*p = x
	return p
}

func (x NameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameType) Descriptor() protoreflect.EnumDescriptor {
	return file_gnparser_proto_enumTypes[0].Descriptor()
}

func (NameType) Type() protoreflect.EnumType {
	return &file_gnparser_proto_enumTypes[0]
}

func (x NameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameType.Descriptor instead.
func (NameType) EnumDescriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{0}
}

// Version contains version of gnparser as well as the timestamp when it
// was compiled.
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	BuildTime string `protobuf:"bytes,2,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Version) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

// Void is an empty input.
type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{1}
}

// InputArray contains name-strings to parse as well as options for parsing.
type InputArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jobs_number sets how many go-routines will be created. If this number is
	// higher than max number of jobs set by gnparser's gRPC server, it will be
	// ignored and max number of jobs will be used instead.
	JobsNumber int32 `protobuf:"varint,1,opt,name=jobs_number,json=jobsNumber,proto3" json:"jobs_number,omitempty"`
	// skip_cleaning indicates weather to run removal of HTML tags or not. When
	// it is true HTML tags are not remooved and names that contain them will not
	// be parsed.
	SkipCleaning bool `protobuf:"varint,2,opt,name=skip_cleaning,json=skipCleaning,proto3" json:"skip_cleaning,omitempty"`
	// names is a list of name-strings to parse.
	Names []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *InputArray) Reset() {
	*x = InputArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputArray) ProtoMessage() {}

func (x *InputArray) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputArray.ProtoReflect.Descriptor instead.
func (*InputArray) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{2}
}

func (x *InputArray) GetJobsNumber() int32 {
	if x != nil {
		return x.JobsNumber
	}
	return 0
}

func (x *InputArray) GetSkipCleaning() bool {
	if x != nil {
		return x.SkipCleaning
	}
	return false
}

func (x *InputArray) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type OutputArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// output contains results of parsing. It keeps the same order of output as
	// the one given in the input.
	Output []*Parsed `protobuf:"bytes,1,rep,name=output,proto3" json:"output,omitempty"`
}

func (x *OutputArray) Reset() {
	*x = OutputArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputArray) ProtoMessage() {}

func (x *OutputArray) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputArray.ProtoReflect.Descriptor instead.
func (*OutputArray) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{3}
}

func (x *OutputArray) GetOutput() []*Parsed {
	if x != nil {
		return x.Output
	}
	return nil
}

type Parsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parsed is false if parsing a string failed.
	Parsed bool `protobuf:"varint,1,opt,name=parsed,proto3" json:"parsed,omitempty"`
	// quality is 1 when name parsed well, 2 if there were some inconsistencies,
	// and 3 when name contains serious problems.
	Quality int32 `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"`
	// quality_warning is empty if quality is 1. In other cases it contains a
	// a list of parsing problems.
	QualityWarning []*QualityWarning `protobuf:"bytes,3,rep,name=quality_warning,json=qualityWarning,proto3" json:"quality_warning,omitempty"`
	// verbatim as the original name-string as it was given with input.
	Verbatim string `protobuf:"bytes,4,opt,name=verbatim,proto3" json:"verbatim,omitempty"`
	// normalized is cleaned-up version of the input name-string
	Normalized string `protobuf:"bytes,5,opt,name=normalized,proto3" json:"normalized,omitempty"`
	// canoincal contains the "core" of scientific name without authorships.
	Canonical *Canonical `protobuf:"bytes,6,opt,name=canonical,proto3" json:"canonical,omitempty"`
	// authorship of the name. It is nil when authorship of the most specific
	// element of the name is not given.
	Authorship *Authorship `protobuf:"bytes,7,opt,name=authorship,proto3" json:"authorship,omitempty"`
	// flattened list of words in the name, their offsets and the semantic
	// meaning.
	Positions []*Position `protobuf:"bytes,8,rep,name=positions,proto3" json:"positions,omitempty"`
	// hybrid is true for named hybrids and hybrid formulas.
	Hybrid bool `protobuf:"varint,9,opt,name=hybrid,proto3" json:"hybrid,omitempty"`
	// is true if a name contains an unambiguous bacterial genus.
	Bacteria bool `protobuf:"varint,10,opt,name=bacteria,proto3" json:"bacteria,omitempty"`
	// tail contains unparseable end of a string, if it exists.
	Tail string `protobuf:"bytes,11,opt,name=tail,proto3" json:"tail,omitempty"`
	// id is a UUID version 5. It is always the same for a particular name-string.
	Id string `protobuf:"bytes,12,opt,name=id,proto3" json:"id,omitempty"`
	// parser_version is the version of gnparser.
	ParserVersion string `protobuf:"bytes,13,opt,name=parser_version,json=parserVersion,proto3" json:"parser_version,omitempty"`
	// cardinality is the number of main elements of a name. For uninomials it is
	// 1, for binomials 2, for trinomials 3 etc. For viruses, hybrid formulas we
	// return 0.
	Cardinality int32 `protobuf:"varint,14,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	// name_type designates the kind of a name.
	NameType NameType `protobuf:"varint,15,opt,name=name_type,json=nameType,proto3,enum=pb.NameType" json:"name_type,omitempty"`
	// details break name into smallest semantic elements.
	//
	// Types that are assignable to Details:
	//	*Parsed_Uninomial
	//	*Parsed_Species
	//	*Parsed_Comparison
	//	*Parsed_Approximation
	Details isParsed_Details `protobuf_oneof:"details"`
	// detailes_hybrid_formula describes details of hybrids. Hybrid formula
	// contains several names.
	DetailsHybridFormula []*HybridFormula `protobuf:"bytes,20,rep,name=details_hybrid_formula,json=detailsHybridFormula,proto3" json:"details_hybrid_formula,omitempty"`
}

func (x *Parsed) Reset() {
	*x = Parsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parsed) ProtoMessage() {}

func (x *Parsed) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parsed.ProtoReflect.Descriptor instead.
func (*Parsed) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{4}
}

func (x *Parsed) GetParsed() bool {
	if x != nil {
		return x.Parsed
	}
	return false
}

func (x *Parsed) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Parsed) GetQualityWarning() []*QualityWarning {
	if x != nil {
		return x.QualityWarning
	}
	return nil
}

func (x *Parsed) GetVerbatim() string {
	if x != nil {
		return x.Verbatim
	}
	return ""
}

func (x *Parsed) GetNormalized() string {
	if x != nil {
		return x.Normalized
	}
	return ""
}

func (x *Parsed) GetCanonical() *Canonical {
	if x != nil {
		return x.Canonical
	}
	return nil
}

func (x *Parsed) GetAuthorship() *Authorship {
	if x != nil {
		return x.Authorship
	}
	return nil
}

func (x *Parsed) GetPositions() []*Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *Parsed) GetHybrid() bool {
	if x != nil {
		return x.Hybrid
	}
	return false
}

func (x *Parsed) GetBacteria() bool {
	if x != nil {
		return x.Bacteria
	}
	return false
}

func (x *Parsed) GetTail() string {
	if x != nil {
		return x.Tail
	}
	return ""
}

func (x *Parsed) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Parsed) GetParserVersion() string {
	if x != nil {
		return x.ParserVersion
	}
	return ""
}

func (x *Parsed) GetCardinality() int32 {
	if x != nil {
		return x.Cardinality
	}
	return 0
}

func (x *Parsed) GetNameType() NameType {
	if x != nil {
		return x.NameType
	}
	return NameType_NONE
}

func (m *Parsed) GetDetails() isParsed_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *Parsed) GetUninomial() *Uninomial {
	if x, ok := x.GetDetails().(*Parsed_Uninomial); ok {
		return x.Uninomial
	}
	return nil
}

func (x *Parsed) GetSpecies() *Species {
	if x, ok := x.GetDetails().(*Parsed_Species); ok {
		return x.Species
	}
	return nil
}

func (x *Parsed) GetComparison() *Comparison {
	if x, ok := x.GetDetails().(*Parsed_Comparison); ok {
		return x.Comparison
	}
	return nil
}

func (x *Parsed) GetApproximation() *Approximation {
	if x, ok := x.GetDetails().(*Parsed_Approximation); ok {
		return x.Approximation
	}
	return nil
}

func (x *Parsed) GetDetailsHybridFormula() []*HybridFormula {
	if x != nil {
		return x.DetailsHybridFormula
	}
	return nil
}

type isParsed_Details interface {
	isParsed_Details()
}

type Parsed_Uninomial struct {
	// uninomial are details for names for genera and higher taxa.
	Uninomial *Uninomial `protobuf:"bytes,16,opt,name=uninomial,proto3,oneof"`
}

type Parsed_Species struct {
	// species describe names of species and infraspecies.
	Species *Species `protobuf:"bytes,17,opt,name=species,proto3,oneof"`
}

type Parsed_Comparison struct {
	// comparison is a name with uncertain indentification usually marked by
	// 'cf.' element.
	Comparison *Comparison `protobuf:"bytes,18,opt,name=comparison,proto3,oneof"`
}

type Parsed_Approximation struct {
	// approximation is a name of incomplete identification, a surrogate name.
	Approximation *Approximation `protobuf:"bytes,19,opt,name=approximation,proto3,oneof"`
}

func (*Parsed_Uninomial) isParsed_Details() {}

func (*Parsed_Species) isParsed_Details() {}

func (*Parsed_Comparison) isParsed_Details() {}

func (*Parsed_Approximation) isParsed_Details() {}

type HybridFormula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// element describes one of names in the hybrid formula.
	//
	// Types that are assignable to Element:
	//	*HybridFormula_Uninomial
	//	*HybridFormula_Species
	//	*HybridFormula_Comparison
	//	*HybridFormula_Approximation
	Element isHybridFormula_Element `protobuf_oneof:"element"`
}

func (x *HybridFormula) Reset() {
	*x = HybridFormula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridFormula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridFormula) ProtoMessage() {}

func (x *HybridFormula) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridFormula.ProtoReflect.Descriptor instead.
func (*HybridFormula) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{5}
}

func (m *HybridFormula) GetElement() isHybridFormula_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *HybridFormula) GetUninomial() *Uninomial {
	if x, ok := x.GetElement().(*HybridFormula_Uninomial); ok {
		return x.Uninomial
	}
	return nil
}

func (x *HybridFormula) GetSpecies() *Species {
	if x, ok := x.GetElement().(*HybridFormula_Species); ok {
		return x.Species
	}
	return nil
}

func (x *HybridFormula) GetComparison() *Comparison {
	if x, ok := x.GetElement().(*HybridFormula_Comparison); ok {
		return x.Comparison
	}
	return nil
}

func (x *HybridFormula) GetApproximation() *Approximation {
	if x, ok := x.GetElement().(*HybridFormula_Approximation); ok {
		return x.Approximation
	}
	return nil
}

type isHybridFormula_Element interface {
	isHybridFormula_Element()
}

type HybridFormula_Uninomial struct {
	Uninomial *Uninomial `protobuf:"bytes,1,opt,name=uninomial,proto3,oneof"`
}

type HybridFormula_Species struct {
	Species *Species `protobuf:"bytes,2,opt,name=species,proto3,oneof"`
}

type HybridFormula_Comparison struct {
	Comparison *Comparison `protobuf:"bytes,3,opt,name=comparison,proto3,oneof"`
}

type HybridFormula_Approximation struct {
	Approximation *Approximation `protobuf:"bytes,4,opt,name=approximation,proto3,oneof"`
}

func (*HybridFormula_Uninomial) isHybridFormula_Element() {}

func (*HybridFormula_Species) isHybridFormula_Element() {}

func (*HybridFormula_Comparison) isHybridFormula_Element() {}

func (*HybridFormula_Approximation) isHybridFormula_Element() {}

type Canonical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stem contains simple canonical form with
	// removed suffixes for species, infraspecies.
	Stem string `protobuf:"bytes,1,opt,name=stem,proto3" json:"stem,omitempty"`
	// simple contains canonical form without ranks.
	Simple string `protobuf:"bytes,2,opt,name=simple,proto3" json:"simple,omitempty"`
	// full contains canonical form with ranks.
	Full string `protobuf:"bytes,3,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *Canonical) Reset() {
	*x = Canonical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canonical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canonical) ProtoMessage() {}

func (x *Canonical) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canonical.ProtoReflect.Descriptor instead.
func (*Canonical) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{6}
}

func (x *Canonical) GetStem() string {
	if x != nil {
		return x.Stem
	}
	return ""
}

func (x *Canonical) GetSimple() string {
	if x != nil {
		return x.Simple
	}
	return ""
}

func (x *Canonical) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type is a semantic meaning of a word.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// start is an offset of the start of the word.
	Start int32 `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// end is an offset of the end of the word.
	End int32 `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{7}
}

func (x *Position) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Position) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Position) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type QualityWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// quality of the warning. 2 means minor inconsistencies, 3 means
	// major problems.
	Quality int32 `protobuf:"varint,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// message describes the warning.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QualityWarning) Reset() {
	*x = QualityWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityWarning) ProtoMessage() {}

func (x *QualityWarning) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityWarning.ProtoReflect.Descriptor instead.
func (*QualityWarning) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{8}
}

func (x *QualityWarning) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *QualityWarning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Uninomial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value of the uninomial, like 'Homo' for 'Homo L.'
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// rank of the uninomial, if given.
	Rank string `protobuf:"bytes,2,opt,name=rank,proto3" json:"rank,omitempty"`
	// higher clade of the uninomial, if given.
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// authorship of the uninomial, if given.
	Authorship *Authorship `protobuf:"bytes,4,opt,name=authorship,proto3" json:"authorship,omitempty"`
}

func (x *Uninomial) Reset() {
	*x = Uninomial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uninomial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uninomial) ProtoMessage() {}

func (x *Uninomial) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uninomial.ProtoReflect.Descriptor instead.
func (*Uninomial) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{9}
}

func (x *Uninomial) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Uninomial) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *Uninomial) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Uninomial) GetAuthorship() *Authorship {
	if x != nil {
		return x.Authorship
	}
	return nil
}

type Species struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// genux of the name.
	Genus string `protobuf:"bytes,1,opt,name=genus,proto3" json:"genus,omitempty"`
	// sub_genus of the name, if given.
	SubGenus string `protobuf:"bytes,2,opt,name=sub_genus,json=subGenus,proto3" json:"sub_genus,omitempty"`
	// species epithet of the name.
	Species string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	// authorship of the specific epithet.
	SpeciesAuthorship *Authorship `protobuf:"bytes,4,opt,name=species_authorship,json=speciesAuthorship,proto3" json:"species_authorship,omitempty"`
	// details of subspecies, varieties etc, if given.
	InfraSpecies []*InfraSpecies `protobuf:"bytes,5,rep,name=infra_species,json=infraSpecies,proto3" json:"infra_species,omitempty"`
}

func (x *Species) Reset() {
	*x = Species{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Species) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Species) ProtoMessage() {}

func (x *Species) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Species.ProtoReflect.Descriptor instead.
func (*Species) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{10}
}

func (x *Species) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Species) GetSubGenus() string {
	if x != nil {
		return x.SubGenus
	}
	return ""
}

func (x *Species) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Species) GetSpeciesAuthorship() *Authorship {
	if x != nil {
		return x.SpeciesAuthorship
	}
	return nil
}

func (x *Species) GetInfraSpecies() []*InfraSpecies {
	if x != nil {
		return x.InfraSpecies
	}
	return nil
}

type InfraSpecies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value of the infraspecific epithet.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// rank of the inraspecific epithet.
	Rank string `protobuf:"bytes,2,opt,name=rank,proto3" json:"rank,omitempty"`
	// authorship of the infraspecific epithet.
	Authorship *Authorship `protobuf:"bytes,3,opt,name=authorship,proto3" json:"authorship,omitempty"`
}

func (x *InfraSpecies) Reset() {
	*x = InfraSpecies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfraSpecies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfraSpecies) ProtoMessage() {}

func (x *InfraSpecies) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfraSpecies.ProtoReflect.Descriptor instead.
func (*InfraSpecies) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{11}
}

func (x *InfraSpecies) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *InfraSpecies) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *InfraSpecies) GetAuthorship() *Authorship {
	if x != nil {
		return x.Authorship
	}
	return nil
}

type Comparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// genus of the name.
	Genus string `protobuf:"bytes,1,opt,name=genus,proto3" json:"genus,omitempty"`
	// specific epithet of the name.
	Species string `protobuf:"bytes,2,opt,name=species,proto3" json:"species,omitempty"`
	// authorship of the name.
	SpeciesAuthorship *Authorship `protobuf:"bytes,3,opt,name=species_authorship,json=speciesAuthorship,proto3" json:"species_authorship,omitempty"`
	// comparison marker (usually cf.).
	Comparison string `protobuf:"bytes,4,opt,name=comparison,proto3" json:"comparison,omitempty"`
}

func (x *Comparison) Reset() {
	*x = Comparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comparison) ProtoMessage() {}

func (x *Comparison) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comparison.ProtoReflect.Descriptor instead.
func (*Comparison) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{12}
}

func (x *Comparison) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Comparison) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Comparison) GetSpeciesAuthorship() *Authorship {
	if x != nil {
		return x.SpeciesAuthorship
	}
	return nil
}

func (x *Comparison) GetComparison() string {
	if x != nil {
		return x.Comparison
	}
	return ""
}

type Approximation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// genus of the name.
	Genus string `protobuf:"bytes,1,opt,name=genus,proto3" json:"genus,omitempty"`
	// specific epithet if given (in case if the approximation for subspecies
	// for example).
	Species string `protobuf:"bytes,2,opt,name=species,proto3" json:"species,omitempty"`
	// species_authorship, if given.
	SpeciesAuthorship *Authorship `protobuf:"bytes,3,opt,name=species_authorship,json=speciesAuthorship,proto3" json:"species_authorship,omitempty"`
	// approximation marker, like sp.
	Approximation string `protobuf:"bytes,4,opt,name=approximation,proto3" json:"approximation,omitempty"`
	// unparsed annotation of the name.
	Ignored string `protobuf:"bytes,5,opt,name=ignored,proto3" json:"ignored,omitempty"`
}

func (x *Approximation) Reset() {
	*x = Approximation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Approximation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approximation) ProtoMessage() {}

func (x *Approximation) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approximation.ProtoReflect.Descriptor instead.
func (*Approximation) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{13}
}

func (x *Approximation) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Approximation) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Approximation) GetSpeciesAuthorship() *Authorship {
	if x != nil {
		return x.SpeciesAuthorship
	}
	return nil
}

func (x *Approximation) GetApproximation() string {
	if x != nil {
		return x.Approximation
	}
	return ""
}

func (x *Approximation) GetIgnored() string {
	if x != nil {
		return x.Ignored
	}
	return ""
}

type Authorship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value is authorship string.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// list of all authors in the name (might include 'ex' and 'emend' authors).
	AllAuthors []string `protobuf:"bytes,2,rep,name=all_authors,json=allAuthors,proto3" json:"all_authors,omitempty"`
	// authors of the original combination.
	Original *AuthGroup `protobuf:"bytes,3,opt,name=original,proto3" json:"original,omitempty"`
	// authors of a new combination.
	Combination *AuthGroup `protobuf:"bytes,4,opt,name=combination,proto3" json:"combination,omitempty"`
}

func (x *Authorship) Reset() {
	*x = Authorship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorship) ProtoMessage() {}

func (x *Authorship) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorship.ProtoReflect.Descriptor instead.
func (*Authorship) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{14}
}

func (x *Authorship) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Authorship) GetAllAuthors() []string {
	if x != nil {
		return x.AllAuthors
	}
	return nil
}

func (x *Authorship) GetOriginal() *AuthGroup {
	if x != nil {
		return x.Original
	}
	return nil
}

func (x *Authorship) GetCombination() *AuthGroup {
	if x != nil {
		return x.Combination
	}
	return nil
}

type AuthGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of authors in the group.
	Authors []string `protobuf:"bytes,1,rep,name=authors,proto3" json:"authors,omitempty"`
	// year of the publication.
	Year string `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	// approximate_year is true, if the year is uncertain.
	ApproximateYear bool `protobuf:"varint,3,opt,name=approximate_year,json=approximateYear,proto3" json:"approximate_year,omitempty"`
	// ex_authors are authors of a publication where name was described.
	ExAuthors *Authors `protobuf:"bytes,4,opt,name=ex_authors,json=exAuthors,proto3" json:"ex_authors,omitempty"`
	// emend_authors are authors that altered name meaning.
	EmendAuthors *Authors `protobuf:"bytes,5,opt,name=emend_authors,json=emendAuthors,proto3" json:"emend_authors,omitempty"`
}

func (x *AuthGroup) Reset() {
	*x = AuthGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthGroup) ProtoMessage() {}

func (x *AuthGroup) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthGroup.ProtoReflect.Descriptor instead.
func (*AuthGroup) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{15}
}

func (x *AuthGroup) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *AuthGroup) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *AuthGroup) GetApproximateYear() bool {
	if x != nil {
		return x.ApproximateYear
	}
	return false
}

func (x *AuthGroup) GetExAuthors() *Authors {
	if x != nil {
		return x.ExAuthors
	}
	return nil
}

func (x *AuthGroup) GetEmendAuthors() *Authors {
	if x != nil {
		return x.EmendAuthors
	}
	return nil
}

type Authors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// authors is a list of authors.
	Authors []string `protobuf:"bytes,1,rep,name=authors,proto3" json:"authors,omitempty"`
	// year of the publication.
	Year string `protobuf:"bytes,2,opt,name=year,proto3" json:"year,omitempty"`
	// approximate_year is true if exact year of the publication is uncertain.
	ApproximateYear bool `protobuf:"varint,3,opt,name=approximate_year,json=approximateYear,proto3" json:"approximate_year,omitempty"`
}

func (x *Authors) Reset() {
	*x = Authors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gnparser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authors) ProtoMessage() {}

func (x *Authors) ProtoReflect() protoreflect.Message {
	mi := &file_gnparser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authors.ProtoReflect.Descriptor instead.
func (*Authors) Descriptor() ([]byte, []int) {
	return file_gnparser_proto_rawDescGZIP(), []int{16}
}

func (x *Authors) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Authors) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *Authors) GetApproximateYear() bool {
	if x != nil {
		return x.ApproximateYear
	}
	return false
}

var File_gnparser_proto protoreflect.FileDescriptor

var file_gnparser_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x67, 0x6e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x22, 0x3e, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x0a,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f,
	0x62, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6a, 0x6f, 0x62, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa1, 0x06, 0x0a, 0x06, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x2b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x62, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69,
	0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6e, 0x6f, 0x6d,
	0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x16, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x14, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xdf, 0x01,
	0x0a, 0x0d, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12,
	0x2d, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x12, 0x27,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x4b, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0x46, 0x0a, 0x08,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x44, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x09, 0x55, 0x6e,
	0x69, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0xcc, 0x01, 0x0a, 0x07, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x47, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x35, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e,
	0x66, 0x72, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x72,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x11, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x0a, 0x65, 0x78,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x09, 0x65, 0x78, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0d, 0x65, 0x6d, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x65, 0x6d, 0x65, 0x6e,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x59, 0x65, 0x61, 0x72, 0x2a, 0x96, 0x01, 0x0a,
	0x08, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x4e, 0x4f, 0x4d, 0x49, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43, 0x49, 0x45, 0x53, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x5f, 0x53, 0x55, 0x52, 0x52, 0x4f, 0x47,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x52, 0x52, 0x4f, 0x47, 0x41,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x5f, 0x48, 0x59,
	0x42, 0x52, 0x49, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49,
	0x52, 0x55, 0x53, 0x10, 0x08, 0x32, 0x5b, 0x0a, 0x08, 0x47, 0x4e, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x03, 0x56, 0x65, 0x72, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1a,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_gnparser_proto_rawDescOnce sync.Once
	file_gnparser_proto_rawDescData = file_gnparser_proto_rawDesc
)

func file_gnparser_proto_rawDescGZIP() []byte {
	file_gnparser_proto_rawDescOnce.Do(func() {
		file_gnparser_proto_rawDescData = protoimpl.X.CompressGZIP(file_gnparser_proto_rawDescData)
	})
	return file_gnparser_proto_rawDescData
}

var file_gnparser_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gnparser_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_gnparser_proto_goTypes = []interface{}{
	(NameType)(0),          // 0: pb.NameType
	(*Version)(nil),        // 1: pb.Version
	(*Void)(nil),           // 2: pb.Void
	(*InputArray)(nil),     // 3: pb.InputArray
	(*OutputArray)(nil),    // 4: pb.OutputArray
	(*Parsed)(nil),         // 5: pb.Parsed
	(*HybridFormula)(nil),  // 6: pb.HybridFormula
	(*Canonical)(nil),      // 7: pb.Canonical
	(*Position)(nil),       // 8: pb.Position
	(*QualityWarning)(nil), // 9: pb.QualityWarning
	(*Uninomial)(nil),      // 10: pb.Uninomial
	(*Species)(nil),        // 11: pb.Species
	(*InfraSpecies)(nil),   // 12: pb.InfraSpecies
	(*Comparison)(nil),     // 13: pb.Comparison
	(*Approximation)(nil),  // 14: pb.Approximation
	(*Authorship)(nil),     // 15: pb.Authorship
	(*AuthGroup)(nil),      // 16: pb.AuthGroup
	(*Authors)(nil),        // 17: pb.Authors
}
var file_gnparser_proto_depIdxs = []int32{
	5,  // 0: pb.OutputArray.output:type_name -> pb.Parsed
	9,  // 1: pb.Parsed.quality_warning:type_name -> pb.QualityWarning
	7,  // 2: pb.Parsed.canonical:type_name -> pb.Canonical
	15, // 3: pb.Parsed.authorship:type_name -> pb.Authorship
	8,  // 4: pb.Parsed.positions:type_name -> pb.Position
	0,  // 5: pb.Parsed.name_type:type_name -> pb.NameType
	10, // 6: pb.Parsed.uninomial:type_name -> pb.Uninomial
	11, // 7: pb.Parsed.species:type_name -> pb.Species
	13, // 8: pb.Parsed.comparison:type_name -> pb.Comparison
	14, // 9: pb.Parsed.approximation:type_name -> pb.Approximation
	6,  // 10: pb.Parsed.details_hybrid_formula:type_name -> pb.HybridFormula
	10, // 11: pb.HybridFormula.uninomial:type_name -> pb.Uninomial
	11, // 12: pb.HybridFormula.species:type_name -> pb.Species
	13, // 13: pb.HybridFormula.comparison:type_name -> pb.Comparison
	14, // 14: pb.HybridFormula.approximation:type_name -> pb.Approximation
	15, // 15: pb.Uninomial.authorship:type_name -> pb.Authorship
	15, // 16: pb.Species.species_authorship:type_name -> pb.Authorship
	12, // 17: pb.Species.infra_species:type_name -> pb.InfraSpecies
	15, // 18: pb.InfraSpecies.authorship:type_name -> pb.Authorship
	15, // 19: pb.Comparison.species_authorship:type_name -> pb.Authorship
	15, // 20: pb.Approximation.species_authorship:type_name -> pb.Authorship
	16, // 21: pb.Authorship.original:type_name -> pb.AuthGroup
	16, // 22: pb.Authorship.combination:type_name -> pb.AuthGroup
	17, // 23: pb.AuthGroup.ex_authors:type_name -> pb.Authors
	17, // 24: pb.AuthGroup.emend_authors:type_name -> pb.Authors
	2,  // 25: pb.GNparser.Ver:input_type -> pb.Void
	3,  // 26: pb.GNparser.ParseArray:input_type -> pb.InputArray
	1,  // 27: pb.GNparser.Ver:output_type -> pb.Version
	4,  // 28: pb.GNparser.ParseArray:output_type -> pb.OutputArray
	27, // [27:29] is the sub-list for method output_type
	25, // [25:27] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_gnparser_proto_init() }
func file_gnparser_proto_init() {
	if File_gnparser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gnparser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridFormula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Canonical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uninomial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Species); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfraSpecies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Approximation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gnparser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gnparser_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Parsed_Uninomial)(nil),
		(*Parsed_Species)(nil),
		(*Parsed_Comparison)(nil),
		(*Parsed_Approximation)(nil),
	}
	file_gnparser_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*HybridFormula_Uninomial)(nil),
		(*HybridFormula_Species)(nil),
		(*HybridFormula_Comparison)(nil),
		(*HybridFormula_Approximation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gnparser_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gnparser_proto_goTypes,
		DependencyIndexes: file_gnparser_proto_depIdxs,
		EnumInfos:         file_gnparser_proto_enumTypes,
		MessageInfos:      file_gnparser_proto_msgTypes,
	}.Build()
	File_gnparser_proto = out.File
	file_gnparser_proto_rawDesc = nil
	file_gnparser_proto_goTypes = nil
	file_gnparser_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GNparserClient is the client API for GNparser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GNparserClient interface {
	// Ver takes an empty argument (Void) and returns description of the gnparser
	// version and build date and time.
	Ver(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error)
	// ParseArray takes a list of name-strings (up to 10000), and retuns back
	// a list of parsed results, preserving the order of input.
	ParseArray(ctx context.Context, in *InputArray, opts ...grpc.CallOption) (*OutputArray, error)
}

type gNparserClient struct {
	cc grpc.ClientConnInterface
}

func NewGNparserClient(cc grpc.ClientConnInterface) GNparserClient {
	return &gNparserClient{cc}
}

func (c *gNparserClient) Ver(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/pb.GNparser/Ver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gNparserClient) ParseArray(ctx context.Context, in *InputArray, opts ...grpc.CallOption) (*OutputArray, error) {
	out := new(OutputArray)
	err := c.cc.Invoke(ctx, "/pb.GNparser/ParseArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GNparserServer is the server API for GNparser service.
type GNparserServer interface {
	// Ver takes an empty argument (Void) and returns description of the gnparser
	// version and build date and time.
	Ver(context.Context, *Void) (*Version, error)
	// ParseArray takes a list of name-strings (up to 10000), and retuns back
	// a list of parsed results, preserving the order of input.
	ParseArray(context.Context, *InputArray) (*OutputArray, error)
}

// UnimplementedGNparserServer can be embedded to have forward compatible implementations.
type UnimplementedGNparserServer struct {
}

func (*UnimplementedGNparserServer) Ver(context.Context, *Void) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ver not implemented")
}
func (*UnimplementedGNparserServer) ParseArray(context.Context, *InputArray) (*OutputArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseArray not implemented")
}

func RegisterGNparserServer(s *grpc.Server, srv GNparserServer) {
	s.RegisterService(&_GNparser_serviceDesc, srv)
}

func _GNparser_Ver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNparserServer).Ver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GNparser/Ver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNparserServer).Ver(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _GNparser_ParseArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputArray)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNparserServer).ParseArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GNparser/ParseArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNparserServer).ParseArray(ctx, req.(*InputArray))
	}
	return interceptor(ctx, in, info, handler)
}

var _GNparser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GNparser",
	HandlerType: (*GNparserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ver",
			Handler:    _GNparser_Ver_Handler,
		},
		{
			MethodName: "ParseArray",
			Handler:    _GNparser_ParseArray_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gnparser.proto",
}
