{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/dimus/gnparser/1.0.0"
  } ],
  "info" : {
    "description" : "GNparser takes scientific names and parses them\ninto their semantic elements.\n\nScientific names can be represented in many different\nvariants. For example \"Homo sapiens\" exists as\n\n- Homo sapiens\n- Homo sapiens Linn.\n- Homo sapiens L. 1758\n- Homo sapiens Linnaeus, 1758\n\nAs a result comparing names from different\nsources is hard. Parsing allows to extract the most\nconservative element from all these cases - \"Homo sapiens\".\n\nMost common use-cases for scientific names parsing are\n\n- Getting the simplest possible canonical form.\n- Quickly sort names by their \"cardinality\" (uninomial, binomial etc.).\n- Normalize name-string to a \"standard\" form.\n- Check if names contain syntactic mistakes.\n- Find semantic meaning of every word in a name.\n\nThe GNparser code and documentation is\nlocated at https://github.com/gnames/gnparser\".\n",
    "version" : "1.0.0",
    "title" : "Global Names Parser API",
    "contact" : {
      "name" : "Dmitry Mozzherin",
      "email" : "dmozzherin@gmail.com",
      "url" : "https://github.com/dimus"
    },
    "license" : {
      "name" : "MIT",
      "url" : "https://opensource.org/licenses/MIT"
    }
  },
  "paths" : {
    "/parse/{names}" : {
      "get" : {
        "summary" : "parses scientific names",
        "operationId" : "parseSciNames",
        "description" : "Makes it possible to break scientific names into\ntheir semantic components.\n",
        "parameters" : [ {
          "in" : "path",
          "name" : "names",
          "description" : "Pass scientific names separated by a pipe `|` character",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "in" : "query",
          "name" : "with_details",
          "description" : "Returns more detailed parsed data.",
          "schema" : {
            "type" : "boolean",
            "example" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching criteria",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Parsed"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      }
    },
    "/parse" : {
      "post" : {
        "summary" : "adds an inventory item",
        "operationId" : "addInventory",
        "description" : "Adds an item to the system",
        "responses" : {
          "201" : {
            "description" : "item created"
          },
          "400" : {
            "description" : "invalid input, object invalid"
          },
          "409" : {
            "description" : "an existing item already exists"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Parsed"
              }
            }
          },
          "description" : "Inventory item to add"
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Parsed" : {
        "type" : "object",
        "required" : [ "id", "parsed", "parseQuality", "cardinality", "verbatim", "parserVersion" ],
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An UUID v5 generated from the input string using \"globalnames.org\"\nDNS domain name as a seed. This UUID can be used as\na distributed global unique identifier of the string and\ncan be created independently in any popular programming language.\n",
            "format" : "uuid",
            "example" : {
              "trinomial" : "27a96e35-6b4d-510c-b4a4-25ba1afa6f19"
            }
          },
          "quality" : {
            "type" : "integer",
            "description" : "Quality of parsing.\n\n- 0 - name-string is not parseable\n- 1 - no parsing problems encountered\n- 2 - small parsing problems\n- 3 - serious parsing problems\n- 4 - severe problems, name could not be parsed completely\n\nThe parseQuality is equal to the quality of the most\nsevere warning (see qualityWarnings). If no problems\nare encountered, and the parsing succeeded, the parseQuality\nis set to 1. If parsing failed, the parseQuality is 0.\n",
            "example" : 2
          },
          "qualityWarnings" : {
            "description" : "Contains encountered parsing problems.",
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QualityWarning"
            }
          },
          "verbatim" : {
            "description" : "Input name-string without modifications.",
            "type" : "string",
            "example" : "Homo sapiens Linn., 1758a"
          },
          "normalized" : {
            "description" : "A normalized version of the input name-string.",
            "type" : "string",
            "example" : "Homo sapiens Linn. 1758"
          },
          "canonical" : {
            "$ref" : "#/components/schemas/Canonical"
          },
          "cardinality" : {
            "description" : "Allows to sort, partition names according to number of elements\nin their canonical forms.\n\n0 - cardinality cannot be calculated\n1 - uninomial\n2 - binomial\n3 - trinomial\n4 - quadrinomial\n",
            "type" : "integer",
            "example" : 2
          },
          "authorship" : {
            "$ref" : "#/components/schemas/Authorship"
          },
          "bacteria" : {
            "description" : "The field is provided if a name has a genus\nthat is registered as bacterial. Possible\nvalues are\n\n- maybe - if the genus has homonyms in other groups\n- yes - if gnparser dictionary does not detect any hompnyms\n\nThe bacterial names often contain strain information which are\nnot parseable and are placed into the \"tail\" field.\n",
            "type" : "string"
          },
          "virus" : {
            "description" : "Is set to true in case if name is not parsed, and probably\nbelongs to a wide variety of sub-cellular entities like\n\n- viruses\n- plasmids\n- prions\n- RNA\n- DNA\n\nViruses are the vast majority in this group of names, \nas a result they gave (very unprecise) name to\nthe field.\n\nWe do plan to create a parser for viruses at some point,\nwhich will expand this group into more precise categories.\n",
            "type" : "boolean"
          },
          "hybrid" : {
            "description" : "Is given if a name is detected as one of the hybrids\n\n- a non-categorized hybrid\n- named hybrid\n- notho- hybrid\n- hybrid formula\n",
            "type" : "string"
          },
          "surrogate" : {
            "description" : "This is a wide category of names that do not follow\nnomenclatural rules\n\n- a non-catogorized surrogates\n- surrogate names from BOLD project\n- comparisons (Homo cf. sapiens)\n- approximations (names for specimen that not fully identified)\n",
            "type" : "string"
          },
          "tail" : {
            "description" : "Unparseable tail of a name. It might contain \"junk\", annotations,\nmalformed parts of a scientific name,\ntaxonomic concept indications, bacterial strains etc.\nIf there is an unparseable tail, the quality of the name-parsing\nis set to the worst category.\n",
            "type" : "string"
          },
          "details" : {
            "description" : "Provided only if \"with_details=true\"\nDetails of a scientific name.\n",
            "oneOf" : [ {
              "$ref" : "#/components/schemas/DetailsUninomial"
            }, {
              "$ref" : "#/components/schemas/DetailsSpecies"
            }, {
              "$ref" : "#/components/schemas/DetailsInfraSpecies"
            }, {
              "$ref" : "#/components/schemas/DetailsComparison"
            }, {
              "$ref" : "#/components/schemas/DetailsApproximation"
            }, {
              "$ref" : "#/components/schemas/DetailsHybridFormula"
            } ]
          }
        }
      },
      "QualityWarning" : {
        "description" : "Explains an encountered parsing problem.\n",
        "type" : "object",
        "required" : [ "quality", "warning" ],
        "properties" : {
          "warning" : {
            "description" : "A sentence that describes an encountered\nparsing problem.\n",
            "type" : "string",
            "example" : "Year with latin character"
          },
          "quality" : {
            "description" : "A parse quality associated with the warning.\n\n- 0 - name-string is not parseable\n- 1 - no parsing problems encountered\n- 2 - small parsing problems\n- 3 - serious parsing problems\n- 4 - severe problems, name could not be parsed completely\n",
            "type" : "integer",
            "example" : 2
          }
        }
      },
      "Canonical" : {
        "description" : "Simplified versions of a name-string more suitable for \nmatching and comparing name-strings than the verbatim version.\n",
        "type" : "object",
        "required" : [ "stemmed", "simple", "full" ],
        "properties" : {
          "stemmed" : {
            "description" : "The most \"normalized\" and simplified version of the name.\nSpecies epithets are stripped of suffixes,\n\"j\" character converted to \"i\",\n\"v\" character converted to \"u\" according to\n\"Schinke R, Greengrass M, Robertson AM and Willett P (1996)\"\n\nIt is most useful to match names when a variability\nin suffixes is possible.\n",
            "type" : "string",
            "example" : "Homo sapiens"
          },
          "simple" : {
            "description" : "A simplified version of a name where some elements like\nranks, or hybrid signs \"×\" are ommited (hybrid signs are\npresent for hybrid formulas).\n\nIt is most useful to match names in general.\n",
            "type" : "string",
            "example" : "Homo sapiens"
          },
          "full" : {
            "description" : "A canonical form that keeps hybrid signs \"×\" for named\nhybrids and shows infra-specific ranks.\n\nIt is most useful for detection of the best matches from\nmultiple results. It is also recommended for displaying\ncanonical forms of botanical names.\n",
            "type" : "string",
            "example" : "Homo sapiens"
          }
        }
      },
      "Authorship" : {
        "description" : "Describes provided metainformation about authors of a name.\nSometimes authorship is provided for several elements of a\nname, for example in\n\"Agalinis purpurea (L.) Briton var. borealis (Berg.) Peterson 1987\"\n\nThe authorship provided outside of \"details\" section belongs to\nthe most fine-grained element of a name (\"var. borealis\" for\nthe example above).\n",
        "type" : "object",
        "required" : [ "verbatim", "normalized" ],
        "properties" : {
          "verbatim" : {
            "description" : "An authorship string without modifications\n",
            "type" : "string",
            "example" : "Linn., 1758a"
          },
          "normalized" : {
            "description" : "An authorship string normalized by gnparser\n",
            "type" : "string",
            "example" : "Linn. 1758"
          },
          "year" : {
            "description" : "A string representing a year of original description\nof the name. The year number is surrounded by parentheses\n\"(1758)\", in cases when a year is approximate.\n",
            "type" : "string",
            "example" : "1758"
          },
          "authors" : {
            "description" : "List of all authors detected in the authorship\n",
            "example" : [ "Linn." ],
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "original" : {
            "$ref" : "#/components/schemas/AuthorGroup"
          },
          "combination" : {
            "$ref" : "#/components/schemas/AuthorGroup"
          }
        }
      },
      "AuthorGroup" : {
        "description" : "Provided only if \"with_details=true\"\nGroup of authors belogning to a particular nomenclatural event.\nWe distinguish to possible situations when AuthorGroup is used.\n\n- original - authors of the original description of a name\n- combination - authors of a new combination, rank etc.\n",
        "type" : "object",
        "required" : [ "authors" ],
        "properties" : {
          "authors" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "year" : {
            "$ref" : "#/components/schemas/Year"
          },
          "exAuthors" : {
            "$ref" : "#/components/schemas/Authors"
          },
          "emendAuthors" : {
            "$ref" : "#/components/schemas/Authors"
          }
        }
      },
      "Year" : {
        "description" : "Provided only if \"with_details=true\"\nYear of publication. If a range of the\nyears provided, the start year is kept,\nwith isApproximate flag set to true.\n",
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "description" : "a normalized year as a string.",
            "type" : "string"
          },
          "isApproximate" : {
            "description" : "The flag is true when the given year is not certain.",
            "type" : "boolean"
          }
        }
      },
      "Authors" : {
        "description" : "Provided only if \"with_details=true\"\nA \"special\" group of authors, that sometimes appear in\nscientific names after \"ex\" or \"emend.\" qualifiers.\n",
        "type" : "object",
        "required" : [ "authors" ],
        "properties" : {
          "authors" : {
            "description" : "A list of detected authors.",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "year" : {
            "$ref" : "#/components/schemas/Year"
          }
        }
      },
      "DetailsUninomial" : {
        "description" : "Details for uninomial names",
        "type" : "object",
        "required" : [ "uninomial" ],
        "properties" : {
          "uninomial" : {
            "type" : "object",
            "required" : [ "value" ],
            "properties" : {
              "value" : {
                "description" : "uninomial name",
                "type" : "string"
              },
              "rank" : {
                "description" : "sometimes uninomial names contain their parent, for example\n\"Zygophyllaceae subfam. Tribuloideae D.M.Porter\".\nThis field contains rank depicted in such name-strings\n\"subfam.\" in the example.\n",
                "type" : "string"
              },
              "parent" : {
                "description" : "sometimes uninomial names contain their parent, for example\n\"Zygophyllaceae subfam. Tribuloideae D.M.Porter\".\nThis field contains the parent depicted in such name-strings\n\"Zygophyllaceae\" in the example.\n",
                "type" : "string"
              },
              "authorship" : {
                "$ref" : "#/components/schemas/Authorship"
              }
            }
          }
        }
      },
      "DetailsSpecies" : {
        "description" : "Details for binomial names",
        "type" : "object",
        "required" : [ "species" ],
        "properties" : {
          "species" : {
            "type" : "object",
            "required" : [ "genus", "species" ],
            "properties" : {
              "genus" : {
                "description" : "genus in a bionomial name",
                "type" : "string"
              },
              "subgenus" : {
                "description" : "subgenus in a binomial name",
                "type" : "string"
              },
              "species" : {
                "description" : "specific epithet of a binomial name",
                "type" : "string"
              },
              "authorship" : {
                "$ref" : "#/components/schemas/Authorship"
              }
            }
          }
        }
      },
      "DetailsInfraSpecies" : {
        "description" : "Details for multinomial names",
        "type" : "object",
        "required" : [ "infraSpecies" ],
        "properties" : {
          "infraSpecies" : {
            "type" : "object",
            "required" : [ "genus", "species" ],
            "properties" : {
              "genus" : {
                "description" : "Genus in a bionomial name",
                "type" : "string"
              },
              "subgenus" : {
                "description" : "Subgenus in a binomial name",
                "type" : "string"
              },
              "species" : {
                "description" : "Specific epithet of a binomial name",
                "type" : "string"
              },
              "authorship" : {
                "$ref" : "#/components/schemas/Authorship"
              },
              "infraSpecies" : {
                "description" : "Infra-specific epithets",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "required" : [ "value" ],
                  "properties" : {
                    "value" : {
                      "description" : "Infra-specific epithet",
                      "type" : "string"
                    },
                    "rank" : {
                      "description" : "Infra-specific rank"
                    },
                    "authorship" : {
                      "$ref" : "#/components/schemas/Authorship"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DetailsComparison" : {
        "description" : "Details for binomial surrogate names with comparison",
        "type" : "object",
        "required" : [ "comparison" ],
        "properties" : {
          "comparison" : {
            "type" : "object",
            "required" : [ "genus", "comparisonMarker" ],
            "properties" : {
              "genus" : {
                "description" : "genus in a bionomial name",
                "type" : "string"
              },
              "species" : {
                "description" : "specific epithet of a binomial name",
                "type" : "string"
              },
              "authorship" : {
                "$ref" : "#/components/schemas/Authorship"
              },
              "comparisonMarker" : {
                "description" : "Comparison abbreviation, usually \"cf.\"",
                "type" : "string"
              }
            }
          }
        }
      },
      "DetailsApproximation" : {
        "description" : "Details for surrogate names with",
        "type" : "object",
        "required" : [ "approximation" ],
        "properties" : {
          "comparison" : {
            "type" : "object",
            "required" : [ "genus", "approximationMarker" ],
            "properties" : {
              "genus" : {
                "description" : "genus in a bionomial name",
                "type" : "string"
              },
              "species" : {
                "description" : "specific epithet of a binomial name",
                "type" : "string"
              },
              "authorship" : {
                "$ref" : "#/components/schemas/Authorship"
              },
              "comparisonMarker" : {
                "description" : "Approximation term, for example \"sp., spp., aff.\"",
                "type" : "string"
              },
              "ignored" : {
                "description" : "Ignored part of approximation name.",
                "type" : "string"
              }
            }
          }
        }
      },
      "DetailsHybridFormula" : {
        "description" : "Details for hybrid formula names",
        "type" : "object",
        "required" : [ "hybridFormula" ],
        "properties" : {
          "hybridFormula" : {
            "type" : "array",
            "items" : {
              "oneOf" : [ {
                "$ref" : "#/components/schemas/DetailsUninomial"
              }, {
                "$ref" : "#/components/schemas/DetailsSpecies"
              }, {
                "$ref" : "#/components/schemas/DetailsInfraSpecies"
              } ]
            }
          }
        }
      }
    }
  }
}